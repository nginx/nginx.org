<?xml version="1.0"?>

<!--
  Copyright (C) Igor Sysoev
  Copyright (C) Nginx, Inc.
  -->

<!DOCTYPE module SYSTEM "../../../../dtd/module.dtd">

<module name="Module ngx_http_fastcgi_module"
        link="/en/docs/http/ngx_http_fastcgi_module.html"
        lang="en"
        rev="54">

<section id="summary">

<para>
The <literal>ngx_http_fastcgi_module</literal> module allows passing
requests to a FastCGI server.
</para>

</section>


<section id="example" name="Example Configuration">

<para>
<example>
location / {
    fastcgi_pass  localhost:9000;
    fastcgi_index index.php;

    fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
    fastcgi_param QUERY_STRING    $query_string;
    fastcgi_param REQUEST_METHOD  $request_method;
    fastcgi_param CONTENT_TYPE    $content_type;
    fastcgi_param CONTENT_LENGTH  $content_length;
}
</example>
</para>

</section>


<section id="directives" name="Directives">

<directive name="fastcgi_bind">
<syntax>
    <value>address</value>
    [<literal>transparent</literal>] |
    <literal>off</literal></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>0.8.22</appeared-in>

<para>
Makes outgoing connections to a FastCGI server originate
from the specified local IP address with an optional port (1.11.2).
Parameter value can contain variables (1.3.12).
The special value <literal>off</literal> (1.3.12) cancels the effect
of the <literal>fastcgi_bind</literal> directive
inherited from the previous configuration level, which allows the
system to auto-assign the local IP address and port.
</para>

<para id="fastcgi_bind_transparent">
The <literal>transparent</literal> parameter (1.11.0) allows
outgoing connections to a FastCGI server originate
from a non-local IP address,
for example, from a real IP address of a client:
<example>
fastcgi_bind $remote_addr transparent;
</example>
In order for this parameter to work,
it is usually necessary to run nginx worker processes with the
<link doc="../ngx_core_module.xml" id="user">superuser</link> privileges.
On Linux it is not required (1.13.8) as if
the <literal>transparent</literal> parameter is specified, worker processes
inherit the <literal>CAP_NET_RAW</literal> capability from the master process.
It is also necessary to configure kernel routing table
to intercept network traffic from the FastCGI server.
</para>

</directive>


<directive name="fastcgi_buffer_size">
<syntax><value>size</value></syntax>
<default>4k|8k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets the <value>size</value> of the buffer used for reading the first part
of the response received from the FastCGI server.
This part usually contains a small response header.
By default, the buffer size is equal to one memory page.
This is either 4K or 8K, depending on a platform.
It can be made smaller, however.
</para>

</directive>


<directive name="fastcgi_buffering">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.5.6</appeared-in>

<para>
Enables or disables buffering of responses from the FastCGI server.
</para>

<para>
When buffering is enabled, nginx receives a response from the FastCGI server
as soon as possible, saving it into the buffers set by the
<link id="fastcgi_buffer_size"/> and <link id="fastcgi_buffers"/> directives.
If the whole response does not fit into memory, a part of it can be saved
to a <link id="fastcgi_temp_path">temporary file</link> on the disk.
Writing to temporary files is controlled by the
<link id="fastcgi_max_temp_file_size"/> and
<link id="fastcgi_temp_file_write_size"/> directives.
</para>

<para>
When buffering is disabled, the response is passed to a client synchronously,
immediately as it is received.
nginx will not try to read the whole response from the FastCGI server.
The maximum size of the data that nginx can receive from the server
at a time is set by the <link id="fastcgi_buffer_size"/> directive.
</para>

<para>
Buffering can also be enabled or disabled by passing
“<literal>yes</literal>” or “<literal>no</literal>” in the
<header>X-Accel-Buffering</header> response header field.
This capability can be disabled using the
<link id="fastcgi_ignore_headers"/> directive.
</para>

</directive>


<directive name="fastcgi_buffers">
<syntax><value>number</value> <value>size</value></syntax>
<default>8 4k|8k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets the <value>number</value> and <value>size</value> of the
buffers used for reading a response from the FastCGI server,
for a single connection.
By default, the buffer size is equal to one memory page.
This is either 4K or 8K, depending on a platform.
</para>

</directive>


<directive name="fastcgi_busy_buffers_size">
<syntax><value>size</value></syntax>
<default>8k|16k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
When <link id="fastcgi_buffering">buffering</link> of responses from the FastCGI
server is enabled, limits the total <value>size</value> of buffers that
can be busy sending a response to the client while the response is not
yet fully read.
In the meantime, the rest of the buffers can be used for reading the response
and, if needed, buffering part of the response to a temporary file.
By default, <value>size</value> is limited by the size of two buffers set by the
<link id="fastcgi_buffer_size"/> and <link id="fastcgi_buffers"/> directives.
</para>

</directive>


<directive name="fastcgi_cache">
<syntax><value>zone</value> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Defines a shared memory zone used for caching.
The same zone can be used in several places.
Parameter value can contain variables (1.7.9).
The <literal>off</literal> parameter disables caching inherited
from the previous configuration level.
</para>

</directive>


<directive name="fastcgi_cache_background_update">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.11.10</appeared-in>

<para>
Allows starting a background subrequest
to update an expired cache item,
while a stale cached response is returned to the client.
Note that it is necessary to
<link id="fastcgi_cache_use_stale_updating">allow</link>
the usage of a stale cached response when it is being updated.
</para>

</directive>


<directive name="fastcgi_cache_bypass">
<syntax><value>string</value> ...</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Defines conditions under which the response will not be taken from a cache.
If at least one value of the string parameters is not empty and is not
equal to “0” then the response will not be taken from the cache:
<example>
fastcgi_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
fastcgi_cache_bypass $http_pragma    $http_authorization;
</example>
Can be used along with the <link id="fastcgi_no_cache"/> directive.
</para>

</directive>


<directive name="fastcgi_cache_key">
<syntax><value>string</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Defines a key for caching, for example
<example>
fastcgi_cache_key localhost:9000$request_uri;
</example>
</para>

</directive>


<directive name="fastcgi_cache_lock">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.12</appeared-in>

<para>
When enabled, only one request at a time will be allowed to populate
a new cache element identified according to the <link id="fastcgi_cache_key"/>
directive by passing a request to a FastCGI server.
Other requests of the same cache element will either wait
for a response to appear in the cache or the cache lock for
this element to be released, up to the time set by the
<link id="fastcgi_cache_lock_timeout"/> directive.
</para>

</directive>


<directive name="fastcgi_cache_lock_age">
<syntax><value>time</value></syntax>
<default>5s</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.7.8</appeared-in>

<para>
If the last request passed to the FastCGI server
for populating a new cache element
has not completed for the specified <value>time</value>,
one more request may be passed to the FastCGI server.
</para>

</directive>


<directive name="fastcgi_cache_lock_timeout">
<syntax><value>time</value></syntax>
<default>5s</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.12</appeared-in>

<para>
Sets a timeout for <link id="fastcgi_cache_lock"/>.
When the <value>time</value> expires,
the request will be passed to the FastCGI server,
however, the response will not be cached.
<note>
Before 1.7.8, the response could be cached.
</note>
</para>

</directive>


<directive name="fastcgi_cache_max_range_offset">
<syntax><value>number</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.11.6</appeared-in>

<para>
Sets an offset in bytes for byte-range requests.
If the range is beyond the offset,
the range request will be passed to the FastCGI server
and the response will not be cached.
</para>

</directive>


<directive name="fastcgi_cache_methods">
<syntax>
    <literal>GET</literal> |
    <literal>HEAD</literal> |
    <literal>POST</literal>
    ...</syntax>
<default>GET HEAD</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>0.7.59</appeared-in>

<para>
If the client request method is listed in this directive then
the response will be cached.
“<literal>GET</literal>” and “<literal>HEAD</literal>” methods are always
added to the list, though it is recommended to specify them explicitly.
See also the <link id="fastcgi_no_cache"/> directive.
</para>

</directive>


<directive name="fastcgi_cache_min_uses">
<syntax><value>number</value></syntax>
<default>1</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets the <value>number</value> of requests after which the response
will be cached.
</para>

</directive>


<directive name="fastcgi_cache_path">
<syntax>
    <value>path</value>
    [<literal>levels</literal>=<value>levels</value>]
    [<literal>use_temp_path</literal>=<literal>on</literal>|<literal>off</literal>]
    <literal>keys_zone</literal>=<value>name</value>:<value>size</value>
    [<literal>inactive</literal>=<value>time</value>]
    [<literal>max_size</literal>=<value>size</value>]
    [<literal>min_free</literal>=<value>size</value>]
    [<literal>manager_files</literal>=<value>number</value>]
    [<literal>manager_sleep</literal>=<value>time</value>]
    [<literal>manager_threshold</literal>=<value>time</value>]
    [<literal>loader_files</literal>=<value>number</value>]
    [<literal>loader_sleep</literal>=<value>time</value>]
    [<literal>loader_threshold</literal>=<value>time</value>]
    [<literal>purger</literal>=<literal>on</literal>|<literal>off</literal>]
    [<literal>purger_files</literal>=<value>number</value>]
    [<literal>purger_sleep</literal>=<value>time</value>]
    [<literal>purger_threshold</literal>=<value>time</value>]</syntax>
<default/>
<context>http</context>

<para>
Sets the path and other parameters of a cache.
Cache data are stored in files.
Both the key and file name in a cache are a result of
applying the MD5 function to the proxied URL.

The <literal>levels</literal> parameter defines hierarchy levels of a cache:
from 1 to 3, each level accepts values 1 or 2.
For example, in the following configuration
<example>
fastcgi_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;
</example>
file names in a cache will look like this:
<example>
/data/nginx/cache/<emphasis>c</emphasis>/<emphasis>29</emphasis>/b7f54b2df7773722d382f4809d650<emphasis>29c</emphasis>
</example>
</para>

<para>
A cached response is first written to a temporary file,
and then the file is renamed.
Starting from version 0.8.9, temporary files and the cache can be put on
different file systems.
However, be aware that in this case a file is copied
across two file systems instead of the cheap renaming operation.
It is thus recommended that for any given location both cache and a directory
holding temporary files
are put on the same file system.
A directory for temporary files is set based on
the <literal>use_temp_path</literal> parameter (1.7.10).
If this parameter is omitted or set to the value <literal>on</literal>,
the directory set by the <link id="fastcgi_temp_path"/> directive
for the given location will be used.
If the value is set to <literal>off</literal>,
temporary files will be put directly in the cache directory.
</para>

<para>
In addition, all active keys and information about data are stored
in a shared memory zone, whose <value>name</value> and <value>size</value>
are configured by the <literal>keys_zone</literal> parameter.
One megabyte zone can store about 8 thousand keys.
<note>
As part of
<commercial_version>commercial subscription</commercial_version>,
the shared memory zone also stores extended
cache <link doc="ngx_http_api_module.xml" id="http_caches_">information</link>,
thus, it is required to specify a larger zone size for the same number of keys.
For example,
one megabyte zone can store about 4 thousand keys.
</note>
</para>

<para>
Cached data that are not accessed during the time specified by the
<literal>inactive</literal> parameter get removed from the cache
regardless of their freshness.
By default, <literal>inactive</literal> is set to 10 minutes.
</para>

<para id="fastcgi_cache_path_max_size">
The special “cache manager” process monitors the maximum cache size set
by the <literal>max_size</literal> parameter,
and the minimum amount of free space set
by the <literal>min_free</literal> (1.19.1) parameter
on the file system with cache.
When the size is exceeded or there is not enough free space,
it removes the least recently used data.
The data is removed in iterations configured by
<literal>manager_files</literal>,
<literal>manager_threshold</literal>, and
<literal>manager_sleep</literal> parameters (1.11.5).
During one iteration no more than <literal>manager_files</literal> items
are deleted (by default, 100).
The duration of one iteration is limited by the
<literal>manager_threshold</literal> parameter (by default, 200 milliseconds).
Between iterations, a pause configured by the <literal>manager_sleep</literal>
parameter (by default, 50 milliseconds) is made.
</para>

<para>
A minute after the start the special “cache loader” process is activated.
It loads information about previously cached data stored on file system
into a cache zone.
The loading is also done in iterations.
During one iteration no more than <literal>loader_files</literal> items
are loaded (by default, 100).
Besides, the duration of one iteration is limited by the
<literal>loader_threshold</literal> parameter (by default, 200 milliseconds).
Between iterations, a pause configured by the <literal>loader_sleep</literal>
parameter (by default, 50 milliseconds) is made.
</para>

<para>
Additionally,
the following parameters are available as part of our
<commercial_version>commercial subscription</commercial_version>:
</para>

<para>
<list type="tag">

<tag-name id="purger">
<literal>purger</literal>=<literal>on</literal>|<literal>off</literal>
</tag-name>
<tag-desc>
Instructs whether cache entries that match a
<link id="fastcgi_cache_purge">wildcard key</link>
will be removed from the disk by the cache purger (1.7.12).
Setting the parameter to <literal>on</literal>
(default is <literal>off</literal>)
will activate the “cache purger” process that
permanently iterates through all cache entries
and deletes the entries that match the wildcard key.
</tag-desc>

<tag-name id="purger_files">
<literal>purger_files</literal>=<value>number</value>
</tag-name>
<tag-desc>
Sets the number of items that will be scanned during one iteration (1.7.12).
By default, <literal>purger_files</literal> is set to 10.
</tag-desc>

<tag-name id="purger_threshold">
<literal>purger_threshold</literal>=<value>number</value>
</tag-name>
<tag-desc>
Sets the duration of one iteration (1.7.12).
By default, <literal>purger_threshold</literal> is set to 50 milliseconds.
</tag-desc>

<tag-name id="purger_sleep">
<literal>purger_sleep</literal>=<value>number</value>
</tag-name>
<tag-desc>
Sets a pause between iterations (1.7.12).
By default, <literal>purger_sleep</literal> is set to 50 milliseconds.
</tag-desc>

</list>
</para>

<para>
<note>
In versions 1.7.3, 1.7.7, and 1.11.10 cache header format has been changed.
Previously cached responses will be considered invalid
after upgrading to a newer nginx version.
</note>
</para>

</directive>


<directive name="fastcgi_cache_purge">
<syntax>string ...</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.5.7</appeared-in>

<para>
Defines conditions under which the request will be considered a cache
purge request.
If at least one value of the string parameters is not empty and is not equal
to “0” then the cache entry with a corresponding
<link id="fastcgi_cache_key">cache key</link> is removed.
The result of successful operation is indicated by returning
the <http-status code="204" text="No Content"/> response.
</para>

<para>
If the <link id="fastcgi_cache_key">cache key</link> of a purge request ends
with an asterisk (“<literal>*</literal>”), all cache entries matching the
wildcard key will be removed from the cache.
However, these entries will remain on the disk until they are deleted
for either <link id="fastcgi_cache_path">inactivity</link>,
or processed by the <link id="purger">cache purger</link> (1.7.12),
or a client attempts to access them.
</para>

<para>
Example configuration:
<example>
fastcgi_cache_path /data/nginx/cache keys_zone=cache_zone:10m;

map $request_method $purge_method {
    PURGE   1;
    default 0;
}

server {
    ...
    location / {
        fastcgi_pass        backend;
        fastcgi_cache       cache_zone;
        fastcgi_cache_key   $uri;
        fastcgi_cache_purge $purge_method;
    }
}
</example>
<note>
This functionality is available as part of our
<commercial_version>commercial subscription</commercial_version>.
</note>
</para>

</directive>


<directive name="fastcgi_cache_revalidate">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.5.7</appeared-in>

<para>
Enables revalidation of expired cache items using conditional requests with
the <header>If-Modified-Since</header> and <header>If-None-Match</header>
header fields.
</para>

</directive>


<directive name="fastcgi_cache_use_stale">
<syntax>
    <literal>error</literal> |
    <literal>timeout</literal> |
    <literal>invalid_header</literal> |
    <literal>updating</literal> |
    <literal>http_500</literal> |
    <literal>http_503</literal> |
    <literal>http_403</literal> |
    <literal>http_404</literal> |
    <literal>http_429</literal> |
    <literal>off</literal>
    ...</syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Determines in which cases a stale cached response can be used
when an error occurs during communication with the FastCGI server.
The directive’s parameters match the parameters of the
<link id="fastcgi_next_upstream"/> directive.
</para>

<para>
The <literal>error</literal> parameter also permits
using a stale cached response if a FastCGI server to process a request
cannot be selected.
</para>

<para id="fastcgi_cache_use_stale_updating">
Additionally, the <literal>updating</literal> parameter permits
using a stale cached response if it is currently being updated.
This allows minimizing the number of accesses to FastCGI servers
when updating cached data.
</para>

<para>
Using a stale cached response
can also be enabled directly in the response header
for a specified number of seconds after the response became stale (1.11.10).
This has lower priority than using the directive parameters.
<list type="bullet" compact="no">

<listitem>
The
“<link url="https://datatracker.ietf.org/doc/html/rfc5861#section-3">stale-while-revalidate</link>”
extension of the <header>Cache-Control</header> header field permits
using a stale cached response if it is currently being updated.
</listitem>

<listitem>
The
“<link url="https://datatracker.ietf.org/doc/html/rfc5861#section-4">stale-if-error</link>”
extension of the <header>Cache-Control</header> header field permits
using a stale cached response in case of an error.
</listitem>

</list>
</para>

<para>
To minimize the number of accesses to FastCGI servers when
populating a new cache element, the <link id="fastcgi_cache_lock"/>
directive can be used.
</para>

</directive>


<directive name="fastcgi_cache_valid">
<syntax>[<value>code</value> ...] <value>time</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets caching time for different response codes.
For example, the following directives
<example>
fastcgi_cache_valid 200 302 10m;
fastcgi_cache_valid 404      1m;
</example>
set 10 minutes of caching for responses with codes 200 and 302
and 1 minute for responses with code 404.
</para>

<para>
If only caching <value>time</value> is specified
<example>
fastcgi_cache_valid 5m;
</example>
then only 200, 301, and 302 responses are cached.
</para>

<para>
In addition, the <literal>any</literal> parameter can be specified
to cache any responses:
<example>
fastcgi_cache_valid 200 302 10m;
fastcgi_cache_valid 301      1h;
fastcgi_cache_valid any      1m;
</example>
</para>

<para>
Parameters of caching can also be set directly
in the response header.
This has higher priority than setting of caching time using the directive.
<list type="bullet" compact="no">

<listitem>
The <header>X-Accel-Expires</header> header field sets caching time of a
response in seconds.
The zero value disables caching for a response.
If the value starts with the <literal>@</literal> prefix, it sets an absolute
time in seconds since Epoch, up to which the response may be cached.
</listitem>

<listitem>
If the header does not include the <header>X-Accel-Expires</header> field,
parameters of caching may be set in the header fields
<header>Expires</header> or <header>Cache-Control</header>.
</listitem>

<listitem>
If the header includes the <header>Set-Cookie</header> field, such a
response will not be cached.
</listitem>

<listitem>
If the header includes the <header>Vary</header> field
with the special value “<literal>*</literal>”, such a
response will not be cached (1.7.7).
If the header includes the <header>Vary</header> field
with another value, such a response will be cached
taking into account the corresponding request header fields (1.7.7).
</listitem>

</list>
Processing of one or more of these response header fields can be disabled
using the <link id="fastcgi_ignore_headers"/> directive.
</para>

</directive>


<directive name="fastcgi_catch_stderr">
<syntax><value>string</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets a string to search for in the error stream of a response
received from a FastCGI server.
If the <value>string</value> is found then it is considered that the FastCGI
server has returned an <link id="fastcgi_next_upstream">invalid response</link>.
This allows handling application errors in nginx, for example:
<example>
location /php/ {
    fastcgi_pass backend:9000;
    ...
    fastcgi_catch_stderr "PHP Fatal error";
    fastcgi_next_upstream error timeout invalid_header;
}
</example>
</para>

</directive>


<directive name="fastcgi_connect_timeout">
<syntax><value>time</value></syntax>
<default>60s</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Defines a timeout for establishing a connection with a FastCGI server.
It should be noted that this timeout cannot usually exceed 75 seconds.
</para>

</directive>


<directive name="fastcgi_force_ranges">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.7.7</appeared-in>

<para>
Enables byte-range support
for both cached and uncached responses from the FastCGI server
regardless of the <header>Accept-Ranges</header> field in these responses.
</para>

</directive>


<directive name="fastcgi_hide_header">
<syntax><value>field</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
By default,
nginx does not pass the header fields <header>Status</header> and
<header>X-Accel-...</header> from the response of a FastCGI
server to a client.
The <literal>fastcgi_hide_header</literal> directive sets additional fields
that will not be passed.
If, on the contrary, the passing of fields needs to be permitted,
the <link id="fastcgi_pass_header"/> directive can be used.
</para>

</directive>


<directive name="fastcgi_ignore_client_abort">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Determines whether the connection with a FastCGI server should be
closed when a client closes the connection without waiting
for a response.
</para>

</directive>


<directive name="fastcgi_ignore_headers">
<syntax><value>field</value> ...</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Disables processing of certain response header fields from the FastCGI server.
The following fields can be ignored: <header>X-Accel-Redirect</header>,
<header>X-Accel-Expires</header>, <header>X-Accel-Limit-Rate</header> (1.1.6),
<header>X-Accel-Buffering</header> (1.1.6),
<header>X-Accel-Charset</header> (1.1.6), <header>Expires</header>,
<header>Cache-Control</header>, <header>Set-Cookie</header> (0.8.44),
and <header>Vary</header> (1.7.7).
</para>

<para>
If not disabled, processing of these header fields has the following
effect:
<list type="bullet" compact="no">

<listitem>
<header>X-Accel-Expires</header>, <header>Expires</header>,
<header>Cache-Control</header>, <header>Set-Cookie</header>,
and <header>Vary</header>
set the parameters of response <link id="fastcgi_cache_valid">caching</link>;
</listitem>

<listitem>
<header>X-Accel-Redirect</header> performs an
<link doc="ngx_http_core_module.xml" id="internal">internal
redirect</link> to the specified URI;
</listitem>

<listitem>
<header>X-Accel-Limit-Rate</header> sets the
<link doc="ngx_http_core_module.xml" id="limit_rate">rate
limit</link> for transmission of a response to a client;
</listitem>

<listitem>
<header>X-Accel-Buffering</header> enables or disables
<link id="fastcgi_buffering">buffering</link> of a response;
</listitem>

<listitem>
<header>X-Accel-Charset</header> sets the desired
<link doc="ngx_http_charset_module.xml" id="charset"/>
of a response.
</listitem>

</list>
</para>

</directive>


<directive name="fastcgi_index">
<syntax><value>name</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets a file name that will be appended after a URI that ends with
a slash, in the value of the <var>$fastcgi_script_name</var> variable.
For example, with these settings
<example>
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
</example>
and the “<literal>/page.php</literal>” request,
the <literal>SCRIPT_FILENAME</literal> parameter will be equal to
“<literal>/home/www/scripts/php/page.php</literal>”,
and with the “<literal>/</literal>” request it will be equal to
“<literal>/home/www/scripts/php/index.php</literal>”.
</para>

</directive>


<directive name="fastcgi_intercept_errors">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Determines whether FastCGI server responses with codes greater than or equal
to 300 should be passed to a client
or be intercepted and redirected to nginx for processing
with the <link doc="ngx_http_core_module.xml" id="error_page"/> directive.
</para>

</directive>


<directive name="fastcgi_keep_conn">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.4</appeared-in>

<para>
By default, a FastCGI server will close a connection right after
sending the response.
However, when this directive is set to the value <literal>on</literal>,
nginx will instruct a FastCGI server to keep connections open.
This is necessary, in particular, for
<link doc="ngx_http_upstream_module.xml" id="keepalive"/>
connections to FastCGI servers to function.
</para>

</directive>


<directive name="fastcgi_limit_rate">
<syntax><value>rate</value></syntax>
<default>0</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.7.7</appeared-in>

<para>
Limits the speed of reading the response from the FastCGI server.
The <value>rate</value> is specified in bytes per second.
The zero value disables rate limiting.
The limit is set per a request, and so if nginx simultaneously opens
two connections to the FastCFI server,
the overall rate will be twice as much as the specified limit.
The limitation works only if
<link id="fastcgi_buffering">buffering</link> of responses from the FastCGI
server is enabled.
Parameter value can contain variables (1.27.0).
</para>

</directive>


<directive name="fastcgi_max_temp_file_size">
<syntax><value>size</value></syntax>
<default>1024m</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
When <link id="fastcgi_buffering">buffering</link> of responses from the FastCGI
server is enabled, and the whole response does not fit into the buffers
set by the <link id="fastcgi_buffer_size"/> and <link id="fastcgi_buffers"/>
directives, a part of the response can be saved to a temporary file.
This directive sets the maximum <value>size</value> of the temporary file.
The size of data written to the temporary file at a time is set
by the <link id="fastcgi_temp_file_write_size"/> directive.
</para>

<para>
The zero value disables buffering of responses to temporary files.
</para>

<para>
<note>
This restriction does not apply to responses
that will be <link id="fastcgi_cache">cached</link>
or <link id="fastcgi_store">stored</link> on disk.
</note>
</para>

</directive>


<directive name="fastcgi_next_upstream">
<syntax>
    <literal>error</literal> |
    <literal>timeout</literal> |
    <literal>invalid_header</literal> |
    <literal>http_500</literal> |
    <literal>http_503</literal> |
    <literal>http_403</literal> |
    <literal>http_404</literal> |
    <literal>http_429</literal> |
    <literal>non_idempotent</literal> |
    <literal>off</literal>
    ...</syntax>
<default>error timeout</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Specifies in which cases a request should be passed to the next server:
<list type="tag">

<tag-name><literal>error</literal></tag-name>
<tag-desc>an error occurred while establishing a connection with the
server, passing a request to it, or reading the response header;</tag-desc>

<tag-name><literal>timeout</literal></tag-name>
<tag-desc>a timeout has occurred while establishing a connection with the
server, passing a request to it, or reading the response header;</tag-desc>

<tag-name><literal>invalid_header</literal></tag-name>
<tag-desc>a server returned an empty or invalid response;</tag-desc>

<tag-name><literal>http_500</literal></tag-name>
<tag-desc>a server returned a response with the code 500;</tag-desc>

<tag-name><literal>http_503</literal></tag-name>
<tag-desc>a server returned a response with the code 503;</tag-desc>

<tag-name><literal>http_403</literal></tag-name>
<tag-desc>a server returned a response with the code 403;</tag-desc>

<tag-name><literal>http_404</literal></tag-name>
<tag-desc>a server returned a response with the code 404;</tag-desc>

<tag-name><literal>http_429</literal></tag-name>
<tag-desc>a server returned a response with the code 429 (1.11.13);</tag-desc>

<tag-name id="non_idempotent"><literal>non_idempotent</literal></tag-name>
<tag-desc>normally, requests with a
<link url="https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2">non-idempotent</link>
method
(<literal>POST</literal>, <literal>LOCK</literal>, <literal>PATCH</literal>)
are not passed to the next server
if a request has been sent to an upstream server (1.9.13);
enabling this option explicitly allows retrying such requests;
</tag-desc>

<tag-name><literal>off</literal></tag-name>
<tag-desc>disables passing a request to the next server.</tag-desc>

</list>
</para>

<para>
One should bear in mind that passing a request to the next server is
only possible if nothing has been sent to a client yet.
That is, if an error or timeout occurs in the middle of the
transferring of a response, fixing this is impossible.
</para>

<para>
The directive also defines what is considered an
<link doc="ngx_http_upstream_module.xml" id="max_fails">unsuccessful
attempt</link> of communication with a server.
The cases of <literal>error</literal>, <literal>timeout</literal> and
<literal>invalid_header</literal> are always considered unsuccessful attempts,
even if they are not specified in the directive.
The cases of <literal>http_500</literal>, <literal>http_503</literal>,
and <literal>http_429</literal> are
considered unsuccessful attempts only if they are specified in the directive.
The cases of <literal>http_403</literal> and <literal>http_404</literal>
are never considered unsuccessful attempts.
</para>

<para>
Passing a request to the next server can be limited by
<link id="fastcgi_next_upstream_tries">the number of tries</link>
and by <link id="fastcgi_next_upstream_timeout">time</link>.
</para>

</directive>


<directive name="fastcgi_next_upstream_timeout">
<syntax><value>time</value></syntax>
<default>0</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.7.5</appeared-in>

<para>
Limits the time during which a request can be passed to the
<link id="fastcgi_next_upstream">next server</link>.
The <literal>0</literal> value turns off this limitation.
</para>

</directive>


<directive name="fastcgi_next_upstream_tries">
<syntax><value>number</value></syntax>
<default>0</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.7.5</appeared-in>

<para>
Limits the number of possible tries for passing a request to the
<link id="fastcgi_next_upstream">next server</link>.
The <literal>0</literal> value turns off this limitation.
</para>

</directive>


<directive name="fastcgi_no_cache">
<syntax><value>string</value> ...</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Defines conditions under which the response will not be saved to a cache.
If at least one value of the string parameters is not empty and is not
equal to “0” then the response will not be saved:
<example>
fastcgi_no_cache $cookie_nocache $arg_nocache$arg_comment;
fastcgi_no_cache $http_pragma    $http_authorization;
</example>
Can be used along with the <link id="fastcgi_cache_bypass"/> directive.
</para>

</directive>


<directive name="fastcgi_param">
<syntax>
    <value>parameter</value> <value>value</value>
    [<literal>if_not_empty</literal>]</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets a <value>parameter</value> that should be passed to the FastCGI server.
The <value>value</value> can contain text, variables, and their combination.
These directives are inherited from the previous configuration level
if and only if there are no <literal>fastcgi_param</literal> directives
defined on the current level.
</para>

<para>
The following example shows the minimum required settings for PHP:
<example>
fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
fastcgi_param QUERY_STRING    $query_string;
</example>
</para>

<para>
The <literal>SCRIPT_FILENAME</literal> parameter is used in PHP for
determining the script name, and the <literal>QUERY_STRING</literal>
parameter is used to pass request parameters.
</para>

<para>
For scripts that process <literal>POST</literal> requests, the
following three parameters are also required:
<example>
fastcgi_param REQUEST_METHOD  $request_method;
fastcgi_param CONTENT_TYPE    $content_type;
fastcgi_param CONTENT_LENGTH  $content_length;
</example>
</para>

<para>
If PHP was built with the <literal>--enable-force-cgi-redirect</literal>
configuration parameter, the <literal>REDIRECT_STATUS</literal> parameter
should also be passed with the value “200”:
<example>
fastcgi_param REDIRECT_STATUS 200;
</example>
</para>

<para>
If the directive is specified with <literal>if_not_empty</literal> (1.1.11) then
such a parameter will be passed to the server only if its value is not empty:
<example>
fastcgi_param HTTPS           $https if_not_empty;
</example>
</para>

</directive>


<directive name="fastcgi_pass">
<syntax><value>address</value></syntax>
<default/>
<context>location</context>
<context>if in location</context>

<para>
Sets the address of a FastCGI server.
The address can be specified as a domain name or IP address,
and a port:
<example>
fastcgi_pass localhost:9000;
</example>
or as a UNIX-domain socket path:
<example>
fastcgi_pass unix:/tmp/fastcgi.socket;
</example>
</para>

<para>
If a domain name resolves to several addresses, all of them will be
used in a round-robin fashion.
In addition, an address can be specified as a
<link doc="ngx_http_upstream_module.xml">server group</link>.
</para>

<para>
Parameter value can contain variables.
In this case, if an address is specified as a domain name,
the name is searched among the described
<link doc="ngx_http_upstream_module.xml">server groups</link>,
and, if not found, is determined using a
<link doc="ngx_http_core_module.xml" id="resolver"/>.
</para>

</directive>


<directive name="fastcgi_pass_header">
<syntax><value>field</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Permits passing <link id="fastcgi_hide_header">otherwise disabled</link> header
fields from a FastCGI server to a client.
</para>

</directive>


<directive name="fastcgi_pass_request_body">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Indicates whether the original request body is passed
to the FastCGI server.
See also the <link id="fastcgi_pass_request_headers"/> directive.
</para>

</directive>


<directive name="fastcgi_pass_request_headers">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Indicates whether the header fields of the original request are passed
to the FastCGI server.
See also the <link id="fastcgi_pass_request_body"/> directive.
</para>

</directive>


<directive name="fastcgi_read_timeout">
<syntax><value>time</value></syntax>
<default>60s</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Defines a timeout for reading a response from the FastCGI server.
The timeout is set only between two successive read operations,
not for the transmission of the whole response.
If the FastCGI server does not transmit anything within this time,
the connection is closed.
</para>

</directive>


<directive name="fastcgi_request_buffering">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.7.11</appeared-in>

<para>
Enables or disables buffering of a client request body.
</para>

<para>
When buffering is enabled, the entire request body is
<link doc="ngx_http_core_module.xml" id="client_body_buffer_size">read</link>
from the client before sending the request to a FastCGI server.
</para>

<para>
When buffering is disabled, the request body is sent to the FastCGI server
immediately as it is received.
In this case, the request cannot be passed to the
<link id="fastcgi_next_upstream">next server</link>
if nginx already started sending the request body.
</para>

</directive>


<directive name="fastcgi_send_lowat">
<syntax><value>size</value></syntax>
<default>0</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
If the directive is set to a non-zero value, nginx will try to
minimize the number
of send operations on outgoing connections to a FastCGI server by using either
<c-def>NOTE_LOWAT</c-def> flag of the
<link doc="../events.xml" id="kqueue"/> method,
or the <c-def>SO_SNDLOWAT</c-def> socket option,
with the specified <value>size</value>.
</para>

<para>
This directive is ignored on Linux, Solaris, and Windows.
</para>

</directive>


<directive name="fastcgi_send_timeout">
<syntax><value>time</value></syntax>
<default>60s</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets a timeout for transmitting a request to the FastCGI server.
The timeout is set only between two successive write operations,
not for the transmission of the whole request.
If the FastCGI server does not receive anything within this time,
the connection is closed.
</para>

</directive>


<directive name="fastcgi_socket_keepalive">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.15.6</appeared-in>

<para>
Configures the “TCP keepalive” behavior
for outgoing connections to a FastCGI server.
By default, the operating system’s settings are in effect for the socket.
If the directive is set to the value “<literal>on</literal>”, the
<c-def>SO_KEEPALIVE</c-def> socket option is turned on for the socket.
</para>

</directive>


<directive name="fastcgi_split_path_info">
<syntax><value>regex</value></syntax>
<default/>
<context>location</context>

<para>
Defines a regular expression that captures a value for the
<var>$fastcgi_path_info</var> variable.
The regular expression should have two captures: the first becomes
a value of the <var>$fastcgi_script_name</var> variable, the second
becomes a value of the <var>$fastcgi_path_info</var> variable.
For example, with these settings
<example>
location ~ ^(.+\.php)(.*)$ {
    fastcgi_split_path_info       ^(.+\.php)(.*)$;
    fastcgi_param SCRIPT_FILENAME /path/to/php$fastcgi_script_name;
    fastcgi_param PATH_INFO       $fastcgi_path_info;
</example>
and the “<literal>/show.php/article/0001</literal>” request,
the <literal>SCRIPT_FILENAME</literal> parameter will be equal to
“<literal>/path/to/php/show.php</literal>”, and the
<literal>PATH_INFO</literal> parameter will be equal to
“<literal>/article/0001</literal>”.
</para>

</directive>


<directive name="fastcgi_store">
<syntax>
    <literal>on</literal> |
    <literal>off</literal> |
    <value>string</value></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Enables saving of files to a disk.
The <literal>on</literal> parameter saves files with paths
corresponding to the directives
<link doc="ngx_http_core_module.xml" id="alias"/> or
<link doc="ngx_http_core_module.xml" id="root"/>.
The <literal>off</literal> parameter disables saving of files.
In addition, the file name can be set explicitly using the
<value>string</value> with variables:
<example>
fastcgi_store /data/www$original_uri;
</example>
</para>

<para>
The modification time of files is set according to the received
<header>Last-Modified</header> response header field.
The response is first written to a temporary file,
and then the file is renamed.
Starting from version 0.8.9, temporary files and the persistent store
can be put on different file systems.
However, be aware that in this case a file is copied
across two file systems instead of the cheap renaming operation.
It is thus recommended that for any given location both saved files and a
directory holding temporary files, set by the <link id="fastcgi_temp_path"/>
directive, are put on the same file system.
</para>

<para>
This directive can be used to create local copies of static unchangeable
files, e.g.:
<example>
location /images/ {
    root                 /data/www;
    error_page           404 = /fetch$uri;
}

location /fetch/ {
    internal;

    fastcgi_pass         backend:9000;
    ...

    fastcgi_store        on;
    fastcgi_store_access user:rw group:rw all:r;
    fastcgi_temp_path    /data/temp;

    alias                /data/www/;
}
</example>
</para>

</directive>


<directive name="fastcgi_store_access">
<syntax><value>users</value>:<value>permissions</value> ...</syntax>
<default>user:rw</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Sets access permissions for newly created files and directories, e.g.:
<example>
fastcgi_store_access user:rw group:rw all:r;
</example>
</para>

<para>
If any <literal>group</literal> or <literal>all</literal> access permissions
are specified then <literal>user</literal> permissions may be omitted:
<example>
fastcgi_store_access group:rw all:r;
</example>
</para>

</directive>


<directive name="fastcgi_temp_file_write_size">
<syntax><value>size</value></syntax>
<default>8k|16k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Limits the <value>size</value> of data written to a temporary file
at a time, when buffering of responses from the FastCGI server
to temporary files is enabled.
By default, <value>size</value> is limited by two buffers set by the
<link id="fastcgi_buffer_size"/> and <link id="fastcgi_buffers"/> directives.
The maximum size of a temporary file is set by the
<link id="fastcgi_max_temp_file_size"/> directive.
</para>

</directive>


<directive name="fastcgi_temp_path">
<syntax>
    <value>path</value>
    [<value>level1</value>
    [<value>level2</value>
    [<value>level3</value>]]]</syntax>
<default>fastcgi_temp</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Defines a directory for storing temporary files
with data received from FastCGI servers.
Up to three-level subdirectory hierarchy can be used underneath the specified
directory.
For example, in the following configuration
<example>
fastcgi_temp_path /spool/nginx/fastcgi_temp 1 2;
</example>
a temporary file might look like this:
<example>
/spool/nginx/fastcgi_temp/<emphasis>7</emphasis>/<emphasis>45</emphasis>/00000123<emphasis>457</emphasis>
</example>
</para>

<para>
See also the <literal>use_temp_path</literal> parameter of the
<link id="fastcgi_cache_path"/> directive.
</para>

</directive>

</section>


<section id="parameters" name="Parameters Passed to a FastCGI Server">

<para>
HTTP request header fields are passed to a FastCGI server as parameters.
In applications and scripts running as FastCGI servers,
these parameters are usually made available as environment variables.
For example, the <header>User-Agent</header> header field is passed as the
<literal>HTTP_USER_AGENT</literal> parameter.
In addition to HTTP request header fields, it is possible to pass arbitrary
parameters using the <link id="fastcgi_param"/> directive.
</para>

</section>


<section id="variables" name="Embedded Variables">

<para>
The <literal>ngx_http_fastcgi_module</literal> module supports embedded
variables that can be used to set parameters using the
<link id="fastcgi_param"/> directive:
<list type="tag">

<tag-name id="var_fastcgi_script_name"><var>$fastcgi_script_name</var>
</tag-name>
<tag-desc>
request URI or, if a URI ends with a slash, request URI with an index file
name configured by the <link id="fastcgi_index"/> directive appended to it.
This variable can be used to set the
<literal>SCRIPT_FILENAME</literal> and <literal>PATH_TRANSLATED</literal>
parameters that determine the script name in PHP.
For example, for the “<literal>/info/</literal>” request with the
following directives
<example>
fastcgi_index index.php;
fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
</example>
the <literal>SCRIPT_FILENAME</literal> parameter will be equal to
“<literal>/home/www/scripts/php/info/index.php</literal>”.

<para>
When using the <link id="fastcgi_split_path_info"/> directive,
the <var>$fastcgi_script_name</var> variable equals the value of
the first capture set by the directive.
</para>
</tag-desc>

<tag-name id="var_fastcgi_path_info"><var>$fastcgi_path_info</var></tag-name>
<tag-desc>the value of the second capture set by the
<link id="fastcgi_split_path_info"/> directive.
This variable can be used to set the
<literal>PATH_INFO</literal> parameter.
</tag-desc>

</list>
</para>

</section>

</module>
